{
  "extends": "next/core-web-vitals",
  "rules": {
    "arrow-spacing": ["error", { "before": true, "after": true }],
    "eqeqeq": "error",
    // "indent": ["error", 2, {
    //   "SwitchCase": 1,
    //   "ignoredNodes": ["JSXElement *"]
      
    // }],
    "react/jsx-indent": "off",
    "linebreak-style": ["error", "unix"],
    "quotes": ["error", "single"],
    "prefer-const": "error",
    "no-const-assign": "error",
    "no-var": "error",
    "no-new-object": "error",
    "object-shorthand": "error",
    "quote-props": ["error", "as-needed", { "keywords": false, "unnecessary": true, "numbers": false }],
    "no-array-constructor": "error",
    "prefer-destructuring": "error",
    "prefer-template": "error",
    "template-curly-spacing": "error",
    "no-eval": "error",
    "no-useless-escape": "error",
    "semi": "error",
    "comma-style": ["error", "last", {
      "exceptions": {
        "ArrayExpression": false,
        "ArrayPattern": false,
        "ArrowFunctionExpression": false,
        "CallExpression": false,
        "FunctionDeclaration": false,
        "FunctionExpression": false,
        "ImportDeclaration": false,
        "ObjectExpression": false,
        "ObjectPattern": false,
        "VariableDeclaration": false,
        "NewExpression": false
      }
    }],
    "comma-dangle": ["error", "always-multiline"],
    "space-before-blocks": "error",
    "space-infix-ops": "error",
    "keyword-spacing": ["error", {
      "before": true,
      "after": true,
      "overrides": {
        "return": { "after": true },
        "throw": { "after": true },
        "case": { "after": true }
      }
    }],
    "newline-per-chained-call": ["error", { "ignoreChainWithDepth": 4 }],
    "no-whitespace-before-property": "error",
    "eol-last": ["error", "always"],
    "padded-blocks": ["error", {
      "blocks": "never",
      "classes": "never",
      "switches": "never"
    }, {
      "allowSingleLineBlocks": true
    }],
    "no-multiple-empty-lines": ["error", { "max": 1, "maxBOF": 0, "maxEOF": 0 }],
    "space-in-parens": ["error", "never"],
    "array-bracket-spacing": ["error", "never"],
    "object-curly-spacing": ["error", "always"],
    "block-spacing": ["error", "always"],
    "comma-spacing": ["error", { "before": false, "after": true }],
    "computed-property-spacing": ["error", "never"],
    "func-call-spacing": ["error", "never"],
    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
    "no-trailing-spaces": "error",
    "spaced-comment": ["error", "always", {
      "line": {
        "exceptions": ["-", "+"],
        "markers": ["=", "!", "/"]
      },
      "block": {
        "exceptions": ["-", "+"],
        "markers": ["=", "!", ":", "::"],
        "balanced": true
      }
    }],
    "no-new-func": "error",
    "space-before-function-paren": ["error", {
      "anonymous": "always",
      "named": "never",
      "asyncArrow": "always"
    }],
    "function-paren-newline": ["error", "multiline-arguments"],
    "no-iterator": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "ForOfStatement",
        "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations."
      }
    ],
    "dot-notation": ["error", { "allowKeywords": true }],
    "one-var": ["error", "never"],
    "no-multi-assign": "error",
    "no-unused-vars": ["error", { "vars": "all", "args": "none", "ignoreRestSiblings": true }],
    "no-new-wrappers": "error"
  }
}